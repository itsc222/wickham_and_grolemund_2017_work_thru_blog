---
title: "Chapter 3: Data Transformation with dplyr"
date: 2023-02-07
error: true
editor: visual
bibliography: references.bib
---

```{r}
library(nycflights13)
library(tidyverse)
```

## nycflights13

```{r}
flights
?flights
```

-   int stands for integers.

-   dbl stands for doubles, or real numbers.

-   chr stands for character vectors, or strings

-   dttm stands for date-times (a date + a time).

-   lgl stands for logical, vectors that contain only TRUE or FALSE.

-   fctr stands for factors, which R uses to represent categorical variables with fixed possible values.

-   date stands for dates. @wickham2016

## dplyr Basics

p\. 45

This sounds like some solid review. Let's do it!

## Filter Rows with filter()

```{r}
filter(flights, month == 1, day == 1)
```

```{r}
jan01 <- filter(flights, month == 1, day == 1)

dec25 <-  filter(flights, month == 12, day == 25)
```

## Comparisons

```{r}
1 + 1 == 2

sqrt(2) ^ 2 == 2

near(sqrt(2) ^ 2, 2)
```

## Logical Operators

I like this pic:

![Diagram of Arguments](arguments.GIF)

```{r}
filter(flights, month == 11 | month == 12)
```

```{r}
nov_dec <-  filter(flights, month %in% c(11, 12))
```

```{r}
filter(flights, !(arr_delay < 100 | dep_delay < 100))
```

## Missing Values

p\. 48

```{r}
df <- tibble(x = c(1, NA, 3))
filter(df, x > 1)
```

```{r}
df
```

```{r}
filter(df, is.na(x) | x > 1)
```

## Exercises

```{r}
colnames(flights)
```

```{r}
flights |>
  filter(arr_delay > 120) |>
  head(5)
```

```{r}
head((filter(flights, dest == "HOU" | dest == "IAH" )))
```

```{r}
head(filter(flights, 
            carrier == "UA" |
              carrier == "AA" |
              carrier == "DL"))
```

```{r}
head(filter(flights, month == 7:9))
```

```{r}
flights |>
  filter(arr_delay > 120) |>
  filter(dep_delay == 0)
  
```

```{r}
flights |>
  filter(dep_delay >= 60) |>
  filter(arr_delay <= 30) |>
  head(5)
```

## Arrange Rows with arrange()

p\. 50

```{r}
head(arrange(flights, year, month, day))
```

```{r}
head(arrange(flights, desc(arr_delay)))
```

## Select Columns with select()

p\. 52

```{r}
# Select columns by name
head(select(flights, year, month, day), 7)
```

```{r}
# Select all columns between year and day (inclusive)
head(select(flights, year:day))
```

```{r}
# Select all columns except those from year to day (inclusive)
head(select(flights, -(year:day)), 8)
```

```{r}
select(flights, contains("dep"))
```

• starts_with("abc") matches names that begin with "abc".

• ends_with("xyz") matches names that end with "xyz".

• contains("ijk") matches names that contain "ijk".

• matches("(.)\\\\1") selects variables that match a regular

@wickham2016 Super helpful.

```{r}
head(rename(flights, tail_num = tailnum))
```

"Another option is to use select() in conjunction with the every thing() helper. This is useful if you have a handful of variables you'd like to move to the start of the data frame." @wickham2016

```{r}
head(select(flights, time_hour, air_time, everything()), 10)
```

## Add New Variables with mutate()

p\. 54.

```{r}
flights_sml <- select(flights,
                      year:day,
                      ends_with("delay"),
                      distance,
                      air_time
)
mutate(flights_sml, gain = arr_delay - dep_delay,
       speed = distance / air_time * 60)

head(flights_sml)
```

```{r}
head(mutate(flights_sml,
       gain = arr_delay - dep_delay,
       hours = air_time / 60,
       gain_per_hour = gain / hours))
```

```{r}
head(transmute(flights,
               gain = arr_delay - dep_delay,
               hours = air_time / 60,
               gain_per_hour = gain / hours))
```

## Useful Creation Functions

```{r}
head(transmute(flights,
               dep_time,
               hour = dep_time %/% 100,
               minute = dep_time %% 100))
```

```{r}
x <- 1:10
```

```{r}
lag(x)

lead(x)
```

```{r}
cumsum(x)
```

```{r}
cummean (x)
```

```{r}
y <- c(1, 2, 2, NA, 3, 4)
```

```{r}
min_rank(y)
```

```{r}
min_rank(desc(y))
```

## Grouped Summaries with summarize()

```{r}
summarize(flights, delay = mean(dep_delay, na.rm = TRUE))
```

```{r}
by_day <- group_by(flights, year, month, day)

summarize(by_day, delay = mean(dep_delay, na.rm = TRUE))
```

## Combining Multiple Operations with the Pipe 

```{r}
by_dest <- group_by(flights, dest)
delay <- summarize(by_dest,
                   count = n(),
                   dist = mean(distance, na.rm = TRUE),
                   delay = mean(arr_delay, na.rm = TRUE))

delay <- filter(delay, count > 20, dest != "HNL")
```

```{r}
ggplot(data = delay, mapping = aes(x = dist, y = delay)) +
geom_point(aes(size = count), alpha = 1/3) +
geom_smooth(se = FALSE)
```

```{r}
delays <- flights |>
  group_by(dest) |>
    summarize(
      count = n(),
      dist = mean(distance, na.rm = TRUE)) |>
        filter(count > 20, dest != "HNL")
```

## Missing Values

```{r}
flights |>
  group_by(year, month, day) |>
  summarize(mean = mean(dep_delay))
```

```{r}
flights |>
  group_by(year, month, day) |>
  summarize(mean = mean(dep_delay, na.rm = TRUE))
```

```{r}
not_cancelled <- flights |>
  filter(!is.na(dep_delay), !is.na(arr_delay))
```

```{r}
not_cancelled |>
  group_by(year, month, day) |>
  summarize(mean = mean(dep_delay))
```

## Counts

```{r}
delays <- not_cancelled |>
  group_by(tailnum) |>
  summarize(
    delay = mean(arr_delay)
  )
```

```{r}
ggplot(data = delays, mapping = aes(x = delay))+
  geom_freqpoly(binwidth = 10)
```

```{r}
delays <-  not_cancelled |>
  group_by(tailnum) |>
  summarise(delay = mean(dep_delay, na.rm = TRUE),
            n = n()
            )
```

```{r}
ggplot(data = delays, mapping = aes(x = n, y = delay)) +
  geom_point(alpha =  0.1)
```

```{r}
delays |>
  filter(n > 25) |>
  ggplot(mapping = aes(x = n, y = delay)) +
           geom_point(alpha = 0.1)
```

```{r}
batting <- as_tibble(Lahman::Batting)
```

```{r}
batters <-  batting |>
  group_by(playerID) |>
  summarize(
    ba = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),
    ab = sum(AB, na.rm = TRUE)
  )
```

```{r}
batters |>
  filter(ab > 100) |>
  ggplot(mapping = aes(x = ab, y = ba)) +
  geom_point(alpha = 0.2) +
  geom_smooth(se = FALSE)
```

## Useful Summary Functions

p\. 66
