---
title: "Ch 1 - Data Visualization with ggplot2"
author: "Ian Schneider"
date: 2023-01-30
bibliography: references.bib
---

## First Steps

```{r}
library(tidyverse)
```

```{r}
mpg
```

```{r}
colnames(mpg)
```

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy))
```

## A Graphing Template

```{r}
#ggplot(data = <DATA>)+
#  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))
```

```{r}
ggplot(data = mpg)
```

```{r}
"rows" 
nrow(mtcars)
"columns"
ncol(mtcars)
```

## Exercises

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = cyl, y = hwy))
```

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = class, y = drv))
```

## Aesthetic Mappings

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = class))
```

```{r, warning=FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, size = class))
```

```{r, warning=FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
```

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, shape = class))
```

"ggplot2 will only use six shapes at a time. By default, additional groups will go unplotted when you use this aesthetic." @wickham2016

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
```

"To set an aesthetic man‐ ually, set the aesthetic by name as an argument of your geom function; i.e., it goes outside of aes()." @wickham2016

## Exercises

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
```

The problem is that the color argument appears insides aes(), which means it creates a separate char variable called 'blue.'

```{r}
?mpg
```

categorical variables: "manufacturer", "trans", "drv", "fl", "class"

continuous variables: "hwy", "cty", "cyl", "year", "displ"

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = displ))
```

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = year))
```

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = trans))
```

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, stroke = cyl))
```

```{r}
# ggplot(data = mpg) + 
#   geom_point(mapping = aes(col > 5))
```

First of all, it seems like 'x' and 'y' are required arguments. Second, it seems like operators like '\<' or '\>' are not acceptable for aes() mappings.

## Common Problems

```{r}
#Make sure you put the + sign in the right place.
# ggplot(data = mpg)
# + geom_point(mapping = aes(x = displ, y = hwy))
```

## Facets

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_wrap(~class, nrow = 2)
```

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_grid(drv ~ cyl)
```

## Exercises

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = drv, y = cyl))
```

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_wrap(drv ~ .)
```

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_wrap(. ~ cyl)
```

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_wrap(~class, nrow = 2)
```

## Geometric Objects (p. 16)

"A geom is the geometrical object that a plot uses to represent data. People often describe plots by the type of geom that the plot uses." @wickham2016

```{r}
#left

ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy))

#right

ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy))
```

```{r}
ggplot(data = mpg)+
  geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
```

```{r}
ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy, col = drv)) +
  geom_smooth(mapping = aes(x = displ, y = hwy, col = drv, linetype = drv))
```

```{r}
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy))
```

```{r}
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
```

```{r}
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy, col = drv), show.legend = FALSE)
```

```{r}
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy)) + 
  geom_point(mapping = aes(x = displ, y = hwy))
```

```{r}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point(mapping = aes(col = class)) + 
  geom_smooth()
```

```{r}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point(mapping = aes(col = class)) + 
  geom_smooth(
    data = filter(mpg, class == 'subcompact'),
    SE = FALSE)
```

Prediction: This is gonna make a colorful-ass plot where both the color of the dots, and the number and color of the geom_smooth lines will be mapped onto the drivetrain.

```{r}
ggplot(
data = mpg,
mapping = aes(x = displ, y = hwy, color = drv)
) +
geom_point() +
geom_smooth(se = FALSE)
```

```{r}
ggplot(
data = mpg,
mapping = aes(x = displ, y = hwy, color = drv)
) +
geom_point(show.legend = FALSE) +
geom_smooth(se = FALSE, show.legend = TRUE)
```

### Statistical Transformations (p. 22)

```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = (aes(x = cut)))
```

```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = (aes(x = cut, y = ..prop.., group = 1)))
```

```{r}
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..))
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = color, y = ..prop..)
)
```

```{r}
ggplot(data = diamonds) + 
  stat_summary(
    mapping = (aes(x = cut, y = depth)),
    fun.ymin = min,
    fun.ymax = max,
    fun.y = median)
```

```{r}
colnames(diamonds)
```

## Exercises

```{r}
diamonds |>
  ggplot(aes(x = cut, y = depth)) + 
  geom_col()

diamonds |>
  ggplot(aes(x = cut))+
  geom_bar()
  
```

In geom_col(), we need two aes arguments. geom_bar() only requires 1.

## Position Adjustments

```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = (aes(x = cut, col = cut)))

ggplot(data = diamonds) + 
  geom_bar(mapping = (aes(x = cut, fill = cut)))

ggplot(data = diamonds) + 
  geom_bar(mapping = (aes(x = cut, fill = clarity)))
```

```{r}
ggplot(
data = diamonds,
mapping = aes(x = cut, fill = clarity)
) +
geom_bar(alpha = 1/5, position = "identity")
ggplot(
data = diamonds,
mapping = aes(x = cut, color = clarity)
) +
geom_bar(fill = NA, position = "identity")
```

```{r}
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = clarity),
position = "fill"
)
```

```{r}
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = clarity),
position = "dodge"
)
```

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy))
```

"The values of hwy and displ are rounded so the points appear on a grid and many points overlap each other. This problem is known as overplotting." @wickham2016

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy),
             position = "jitter")
```

position = "jitter" adds just a small amount of random noise to each point so overlapping points can appear next to each other. This helps prevent 'overplotting.'

## Exercises

```{r}
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point()

ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_jitter()

ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_jitter(width = 5, height = 5)
```

```{r}
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_count()
```

## Coordinate Systems (p. 31)

```{r}
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
  geom_boxplot()

ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
  geom_boxplot() +
  coord_flip()
```

```{r}
library(maps)
```

```{r}
nz <-  map_data("nz")

ggplot(nz, aes(x = long, y = lat, group = group)) + 
  geom_polygon(fill = "white", color = "black")
```

```{r}
ggplot(nz, aes(x = long, y = lat, group = group)) + 
  geom_polygon(fill = "white", color = "black") + 
  coord_quickmap()
```

```{r}
bar <- ggplot(data = diamonds) + 
  geom_bar(
    mapping = aes(x = cut, fill = cut),
    show.legend = FALSE,
    width = 1
  ) +
  theme(aspect.ratio = 1) +
  labs(x = NULL, y = NULL)
  
bar + coord_flip()

bar + coord_polar()
```

## Exercises

Making a pie chart is hard :(

```{r}
# diamonds |>
#   filter(cut == "Ideal") |>
#   ggplot(aes(x = cut, y = clarity, fill = clarity)) +
#   geom_bar(stat = "identity", width = 1) +
#   coord_polar("y", start = 0)
```

```{r}
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline() +
coord_fixed()
```

## The Layered Grammar of Graphics

```{r}
ggplot(data = diamonds) + 
  stat_count(mapping = aes(x = cut, fill = cut))
```
